parameters:
- name: regressionTests
  type: object
  default:
  - name: MSTestExample-Attachments
    format: mstest
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/MSTestExample-Attachments/TestResults/TestResults.trx'
  - name: NUnitExample
    format: nunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/NUnitExample/TestResults/TestResults.xml'
  - name: NUnitExample-Attachments
    format: nunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/NUnitExample-Attachments/TestResults/TestResults.xml'
  - name: NUnitExample-Attachments-Wildcard
    format: nunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/generated/**/TestResults.xml'
  - name: JUnitExample-Maven
    format: junit
    testResultsFile: '$(Build.SourcesDirectory)/examples/java/JUnitExample-maven/TestResults.xml'
  - name: xUnitExample
    format: xunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/xUnitExample/TestResults/TestResults.xml'
    expectedResults:
      - outcome: Passed
        count: 7
      - outcome: Failed
        count: 1
      - outcome: NotExecuted
        count: 1
  - name: FailOnFailedTests
    format: nunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/NUnitExample/TestResults/TestResults.xml'
    failTaskOnFailedTests: true
  - name: FailOnSkippedTests
    format: nunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/NUnitExample/TestResults/TestResults.xml'
    failTaskOnSkippedTests: true

steps:
- pwsh: |
    Import-Module $(Build.SourcesDirectory)/examples/helpers/TestGenerator/TestGenerator.psm1
    $items = @(
      @{ Folder = "NUnit-1MB"; TestCases = @( "4852", "4861", "4862"); AttachmentCount = 5; AttachmentSize = (1024*1024)}
      @{ Folder = "NUnit-5MB"; TestCases = @( "4859", "4863", "4864"); AttachmentCount = 5; AttachmentSize = (1024*1024*5)}
      @{ Folder = "NUnit-10MB"; TestCases =@( "4860", "4865", "4866"); AttachmentCount = 5; AttachmentSize = (1024*1024*10)}
    )

    foreach ($item in $items) {
      $invokeArgs = @{
        TestResultsDirectory = "$(Build.SourcesDirectory)/examples/generated/$($item.Folder)"
        TestResultsFile = "TestResults.xml"
        TestFramework = "NUnit"
        TestCaseIds = $item.TestCases
        AttachmentsCount = $item.AttachmentCount
        AttachmentSizeInBytes = $item.AttachmentSize
      }

      Build-TestResults @invokeArgs
    }

  displayName: 'Generate additional test data'


- ${{ each test in parameters.regressiontests }}:
  - task: PowerShell@2
    name: ${{ replace(lower(test.name), '-','_') }}
    displayName: 'Run extension against ${{ test.name }}'
    ${{ if eq(test.failTaskOnFailedTests,'true') }}:
      continueOnError: true
    inputs:
      workingDirectory: $(Pipeline.Workspace)/build
      filePath: '$(Pipeline.Workspace)/build/Test-ExtensionLocally.ps1'
      arguments: >
        -CollectionUri $(System.CollectionUri)
        -ProjectName 'Test Plan Extension'
        -AccessToken $(System.AccessToken)
        -TestResultFormat ${{ test.format }}
        -TestResultFiles ${{ test.testResultsFile }}
        -TestPlan 'Primary Test Plan'
        -TestConfigFilter ''
        -TestConfigAliases ''
        -TestCaseMatchStrategy ''
        -TestCaseProperty 'TestCaseId'
        -TestCaseRegex 'TestCase(\d+)'
        -TestConfigProperty ''
        -TestRunTitle '$(Build.DefinitionName) - $(nodeVersion) - ${{ test.name }}'
        -BuildId $(Build.BuildId)
        -ReleaseId ''
        -ReleaseEnvironmentId ''
        -failTaskOnFailedTests '${{ iif( ne(test.failTaskOnFailedTests,''), test.failTaskOnFailedTests, 'false' ) }}'
        -failTaskOnSkippedTests '${{ iif( ne(test.failTaskOnSkippedTests,''), test.failTaskOnSkippedTests, 'false' ) }}'
        -DryRun ''

  - ${{ if ne(test.expectedResults, '') }}:
    - task: PowerShell@2
      displayName: 'Validate results for ${{ test.name }}'
      inputs:
        targetType: 'inline'
        script: |
          $expected = $env:expected | ConvertFrom-Json
          $testRun = $env:testrun
          $testRunUrl = $env:testrunurl

          if (-not $testRun) {
            Write-Error "Test Run ID is not available. Cannot validate results."
            exit 0
          }
          if ( -not $testRunUrl) {
            Write-Error "Test Run URL is not available. Cannot validate results."
            exit 0
          }

          Write-Host "Validating Test Run ID: $testRun"
          Write-Host "Test Run URL: $testRunUrl"

          $auth64 = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$(System.AccessToken)"))
          $headers = @{ Authorization = "Basic $auth64" }
          $uri = "$(System.CollectionUri)/Test%20Plan%20Extension/_apis/test/runs/$($testRun)?api-version=7.1"

          $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get

          foreach ($expect in $expected) {
            $outcome = $expect.outcome
            $count = $expect.count

            $actualCount = ($response.runStatistics | Where-Object { $_.outcome -eq $outcome }).count

            if ($actualCount -ne $count) {
              Write-Error "Validation failed for outcome '$outcome'. Expected: $count, Actual: $actualCount"
            }
            else {
              Write-Host "Validation succeeded for outcome '$outcome'. Count: $count"
            }
          }

      env:
        expected: ${{ convertToJson(test.expectedResults) }}
        testrun: $(${{ replace(lower(test.name), '-','_') }}.TestRunId)
        testrunurl: $(${{ replace(lower(test.name), '-','_') }}.TestRunUrl)
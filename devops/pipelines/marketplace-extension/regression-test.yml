parameters:
- name: regressionTests
  type: object
  default:
  - name: MSTestExample-Attachments
    format: mstest
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/MSTestExample-Attachments/TestResults/TestResults.trx'
  - name: NUnitExample
    format: nunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/NUnitExample/TestResults/TestResults.xml'
  - name: NUnitExample-Attachments
    format: nunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/NUnitExample-Attachments/TestResults/TestResults.xml'
  - name: xUnitExample
    format: xunit
    testResultsFile: '$(Build.SourcesDirectory)/examples/dotnet/xUnitExample/TestResults/TestResults.xml'

steps:
- ${{ each test in parameters.regressiontests }}:
  - task: PowerShell@2
    displayName: 'Run extension against ${{ test.name }}'
    inputs:
      workingDirectory: $(Pipeline.Workspace)/build
      filePath: '$(Pipeline.Workspace)/build/Test-ExtensionLocally.ps1'
      arguments: >
        -CollectionUri $(System.CollectionUri)
        -ProjectName 'Test Plan Extension'
        -AccessToken $(System.AccessToken)
        -TestResultFormat ${{ test.format }}
        -TestResultFiles ${{ test.testResultsFile }}
        -TestPlan 'Primary Test Plan'
        -TestConfigFilter ''
        -TestConfigAliases ''
        -TestCaseMatchStrategy ''
        -TestCaseProperty 'TestCaseId'
        -TestCaseRegex 'TestCase(\d+)'
        -TestConfigProperty ''
        -TestRunTitle '$(Build.DefinitionName) - $(nodeVersion) - ${{ test.name }}'
        -BuildId $(Build.BuildId)
        -ReleaseId ''
        -ReleaseEnvironmentId ''
        -DryRun ''
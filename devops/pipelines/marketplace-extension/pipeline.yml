###############################################################################
# Marketplace Extension 
#
# Packages and publishes the testplan-extension to the marketplace
###############################################################################
trigger: none

pool:
  vmImage: "ubuntu-latest"

parameters:
- name: publishExtension
  type: boolean
  displayName: 'Publish Extension'
  default: false

variables:
- group: pipeline-extension-settings
- name: workingDir
  value: $(Build.SourcesDirectory)/PublishTestPlanResultsV1

jobs:
- job: build
  displayName: 'Build + Package'
  steps:
  - checkout: self

  # use node
  - task: UseNode@1
    displayName: Install Node 20
    inputs:
      version: 20.x

  # mocha test runner
  - task: Npm@1
    displayName: Install Mocha
    inputs:
      command: custom
      customCommand: install --global mocha

  # npm install
  - task: Npm@1
    displayName: Install node_modules
    inputs:
      command: install
      workingDir: $(workingDir)

  # tsc
  - task: Npm@1
    displayName: "Compile"
    inputs:
      command: custom
      customCommand: run build
      workingDir: $(workingDir)

  # run tests
  - task: Npm@1
    displayName: "Test"
    inputs:
      command: custom
      customCommand: run test
      workingDir: $(workingDir)
    env:
      SYSTEM_ACCESSTOKEN: $(TestPlanPAT)
      TEAMPROJECT: 'ADO Test Automation'
      TEAMPROJECTID: 'b4696915-7e31-4b2c-8024-c20273cc6ae2'
      TESTPLANID: '156'
      TESTROOTSUITE: '165'

  # npm prune --omit=dev
  - task: Npm@1
    displayName: "Prune dependencies"
    inputs:
      command: custom
      customCommand: prune --omit=dev
      workingDir: $(workingDir)

  # install the extension cli tool
  - task: TfxInstaller@5
    displayName: Use Tfx
    inputs:
      version: 'v0.x'
      checkLatest: true

  # fetch the current extension version
  #   You must build and upload manually for the first execution
  #   specify the Extension.VersionOverride variable at queue time to override this value
  - task: QueryAzureDevOpsExtensionVersion@5
    displayName: Fetch Current Extension Version
    name: Query
    inputs:
      connectTo: 'VsTeam'
      connectedServiceName: 'AzureDevOpsMarketplace'
      publisherId: '$(PublisherID)'
      extensionId: '$(ExtensionID)'
      versionAction: 'Patch'
  
  # Create the vsix package
  - task: PackageAzureDevOpsExtension@5
    displayName: Package Extension
    inputs:
      rootFolder: '$(Build.SourcesDirectory)'
      publisherId: '$(PublisherID)'
      extensionId: '$(ExtensionID)'
      extensionName: '$(ExtensionName)'
      extensionVersion: '$(Query.Extension.Version)'
      updateTasksVersion: true
      updateTasksVersionType: 'patch'
      extensionVisibility: 'private' 
      extensionPricing: 'free'
      outputPath: '$(Build.ArtifactStagingDirectory)'

  # Upload and publish the extension
  - task: PublishAzureDevOpsExtension@5
    displayName: Publish Extension
    condition: eq('${{ parameters.publishExtension}}', 'true')
    inputs:
      connectTo: 'VsTeam'
      connectedServiceName: 'AzureDevOpsMarketplace' 
      fileType: 'vsix'
      vsixFile: '$(Build.ArtifactStagingDirectory)/*.vsix'
      publisherId: '$(PublisherID)'
      extensionId: '$(ExtensionID)'
      extensionName: '$(ExtensionName)'
      updateTasksVersion: false
      extensionVisibility: 'private'
      extensionPricing: 'free'

  # publish artifact for inspection
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: 'vsix'
    displayName: 'Publish vsix artifact'

  # For pull requests, publish the build as an artifact for consumption by regression suite
  - ${{ if or( eq(variables['Build.Reason'], 'PullRequest'), ne(variables['Build.SourceBranchName'], 'main') ) }}:
    - publish: $(workingDir)
      artifact: 'build'
      displayName: 'Publish compiled build for regression tests'

# For pull requests or non-main branches, run the regression test suite
- ${{ if or( eq(variables['Build.Reason'], 'PullRequest'), ne(variables['Build.SourceBranchName'], 'main') ) }}:
  - job: regression_test
    dependsOn: build
    displayName: 'Regression Test'
    pool:
      vmImage: $(pool)
    strategy:
      matrix:
        node16-linux:
          nodeVersion: '16.x'
          pool: ubuntu-latest
        node16-windows:
          nodeVersion: '16.x'
          pool: windows-latest
        node20-linux:
          AGENT_USE_NODE20: true
          nodeVersion: '20.x'
          pool: ubuntu-latest
        node20-windows:
          AGENT_USE_NODE20: true
          nodeVersion: '20.x'
          pool: windows-latest
          
    steps:
    - checkout: self

    # use node
    - task: UseNode@1
      displayName: Install Node ${{ variables.nodeVersion }}
      inputs:
        version: $(nodeVersion)

    # download pre-built artifact
    - download: current
      displayName: 'Download Build Artifact'
      artifact: 'build'

    # run tests
    - template: regression-test.yml
